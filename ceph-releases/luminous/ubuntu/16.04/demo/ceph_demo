#! /usr/bin/env bash
set -e


#############
# VARIABLES #
#############
readonly PROGRAM=$(basename "$0")
CEPH_NANO_UID=nano
RGW_CIVETWEB_PORT=8000
if [[ $(ip r | head -n1) =~ 127.0.0.1 ]]; then
  IP=127.0.0.1
else
  IP=$(ip route get 8.8.8.8 2>/dev/null | head -1 |sed -e 's/.*src \([0-9]*\.[0-9]*\.[0-9]*\.[0-9]*\).*/\1/g')
fi

WORKING_DIR=/usr/share/ceph-nano

#############
# FUNCTIONS #
#############
function set_trap_docker_start {
  # propagate traps to all functions
  set -E
  trap 'trap_docker_start' ERR
}

function trap_docker_start {
  echo -e "\n$PROGRAM failed to start."
  echo "If you had any data, there are safe."
  echo "Try to run $PROGRAM again: ./$PROGRAM start [working dir]"
  echo ""
  echo "Now, displaying $PROGRAM logs."
  docker logs ceph-nano
  echo ""
  echo ""
  echo "Now, displaying S3 logs (if available)"
  show_rgw_logs
  echo ""
  echo "Open an issue at: https://github.com/ceph/ceph-container."
  echo ""
  rm_ceph_nano
  true
}

function show_usage {
	cat <<EOM

Usage: ./$PROGRAM [options]

Options:
    start [working dir]   starts $PROGRAM. Default working directory is $WORKING_DIR
    stop                  stops $PROGRAM
    restart               restarts $PROGRAM
    status                prints useful information about $PROGRAM
    purge                 DANGEROUS, removes the $PROGRAM and all its data
    logs                  displays container S3 logs (can be really verbose)
    help                  shows this help


About [working dir] optional parameter to 'start'.
It can be changed like this: ./$PROGRAM start [working dir].
Only files within this directory can be uploaded to Ceph Rados Gateway.
If you stopped $PROGRAM and want to start it the [working dir] option is not needed.


Interact with S3:
    ./$PROGRAM mb BUCKET                               Make bucket
    ./$PROGRAM rb BUCKET                               Remove bucket
    ./$PROGRAM ls [BUCKET[/PREFIX]                     List objects or buckets
    ./$PROGRAM la                                      List all object in all buckets
    ./$PROGRAM put FILE BUCKET[/PREFIX]                Put file into bucket
    ./$PROGRAM get BUCKET/OBJECT LOCAL_FILE            Get file from bucket
    ./$PROGRAM del BUCKET/OBJECT                       Delete file from bucket
    ./$PROGRAM sync LOCAL_DIR BUCKET[/PREFIX]          Synchronize a directory tree to S3
    ./$PROGRAM du [BUCKET[/PREFIX]]                    Disk usage by buckets
    ./$PROGRAM info BUCKET[/OBJECT]                    Get various information about Buckets or Files
    ./$PROGRAM cp BUCKET1/OBJECT1 BUCKET2[/OBJECT2]    Copy object
    ./$PROGRAM mv BUCKET1/OBJECT1 BUCKET2[/OBJECT2]    Move object

EOM
}

function test_args {
  if [ $# -lt 1 ]; then
    show_usage
    exit 1
  fi
}

function docker_exist {
  if ! command -v docker 1> /dev/null; then
    echo "Docker is not present on your system."
    echo "Installation instructions can be found at https://docs.docker.com/engine/installation/"
    exit 1
  fi
}

function create_ceph_nano_volumes {
  for vol in varlibceph etcceph; do
    if ! docker volume ls | grep -sq "$vol"; then
      docker volume create --name "$vol" 1> /dev/null
    fi
  done
}

function get_aws_key {
  CEPH_NANO_ACCESS_KEY=$(docker exec ceph-nano grep -Po '(?<="access_key": ")[^"]*' /nano_user_details)
  CEPH_NANO_SECRET_KEY=$(docker exec ceph-nano grep -Po '(?<="secret_key": ")[^"]*' /nano_user_details)
}

function ceph_nano_health {
  COUNT=10
  while [ $COUNT -ne 0 ]; do
    if docker logs ceph-nano 2> /dev/null | grep -sq SUCCESS; then
      return 0
    else
      sleep 3 && echo -n "."
      let COUNT=COUNT-1
    fi
  done
  # if we arrive here, the trap function will take over
}

function ceph_nano_s3_health {
  COUNT=10
  while [ $COUNT -ne 0 ]; do
    set +e
    if curl --fail --silent --output /dev/null http://"$IP":8000; then
      set -e
      return 0
    else
      sleep 2 && echo -n "."
      let COUNT=COUNT-1
    fi
  done
}

function wait_for_container {
  ceph_nano_health
  ceph_nano_s3_health
}

function selinux {
  if command -v getenforce &> /dev/null; then
    if [[ $(getenforce) == "Enforcing" ]]; then
      chcon -Rt svirt_sandbox_file_t "$WORKING_DIR"
    fi
  fi
}

function docker_version {
  docker_version=$(docker --version | awk '{ sub (",", "", $3); print $3 }' | cut -f1 -d '.')
  if [[ "$docker_version" -ge "17" ]]; then
    # shellcheck disable=SC2054,SC2191
    VOLUMES=(--mount type=volume,source=etcceph,target=/etc/ceph --mount type=volume,source=varlibceph,target=/var/lib/ceph)
  else
    VOLUMES=(-v etcceph:/etc/ceph -v varlibceph:/var/lib/ceph)
  fi
}

function start_ceph_nano {
  if [ -n "$1" ]; then
    WORKING_DIR="$1"
  fi
  [ ! -d $WORKING_DIR ] && mkdir -p $WORKING_DIR
  selinux
  set_trap_docker_start
  if [[ "$(docker ps --filter='name=ceph-nano' | wc -l)" -eq "2" ]]; then
    echo "$PROGRAM is already running!"
    echo "Check its status with: ./$PROGRAM status"
    exit 0
  elif [[ "$(docker ps -a --filter='name=ceph-nano' | wc -l)" -eq "2" ]]; then
    echo -n "Starting existing $PROGRAM..."
    docker start ceph-nano 1> /dev/null
    wait_for_container
    echo ""
  elif ! docker ps | grep -sq ceph-nano; then
    if [[ "$IP" == "127.0.0.1" ]]; then
      echo "You are offline, binding $PROGRAM on $IP."
    fi
    echo -n "Starting $PROGRAM..."
    docker_version
    docker run --detach \
    --name ceph-nano \
    --memory 1g \
    "${VOLUMES[@]}" \
    -v $WORKING_DIR:$WORKING_DIR \
    -p "$IP":5000:5000 \
    -p "$IP":8000:8000 \
    -p "$IP":7000:7000 \
    -e CEPH_DEMO_UID=$CEPH_NANO_UID \
    -e NETWORK_AUTO_DETECT=4 \
    -e MON_IP=127.0.0.1 \
    -e RGW_CIVETWEB_PORT=8000 \
    -e DEBUG=verbose \
    ceph/daemon demo 1> /dev/null
    wait_for_container
    echo ""
  fi
}

function echo_info {
  if docker ps | grep -sq ceph-nano; then
    ceph_nano_health
    ceph_nano_s3_health
    get_aws_key
    echo ""
    echo "Ceph status is: $(docker exec ceph-nano ceph health)"
    echo "Ceph Rados Gateway address is: http://$IP:$RGW_CIVETWEB_PORT"
    echo "Your working directory is: $WORKING_DIR"
    echo "S3 user is: nano"
    echo "S3 access key is: $CEPH_NANO_ACCESS_KEY"
    echo "S3 secret key is: $CEPH_NANO_SECRET_KEY"
    echo ""
  else
    echo "$PROGRAM is not running!"
    echo "Start it with: ./$PROGRAM start [working dir]"
  fi
}

function stop_ceph_nano {
  if docker ps | grep -sq ceph-nano; then
    echo "Stopping ${PROGRAM}..."
    docker stop ceph-nano &> /dev/null || true
  else
    echo "$PROGRAM is already stopped!"
    echo "Start it with: ./$PROGRAM start [working dir]"
  fi
}

function rm_ceph_nano {
  trap - ERR
  docker rm -f ceph-nano &> /dev/null || true
}

function purge_ceph_nano {
  trap - ERR
  rm_ceph_nano
  docker volume rm etcceph varlibceph 1> /dev/null
}

function s3cmd_wrap {
  if docker ps | grep -sq ceph-nano; then
    IFS=" " read -r -a array <<< "$*"
    local docker_exec
    docker_exec="docker exec ceph-nano s3cmd"
    if [[ "${array[0]}" =~ mb|rb|ls|del|info|du ]]; then
      $docker_exec "${array[0]}" "${array[1]/#/s3://}"
    elif [[ "${array[0]}" =~ cp|mv ]]; then
      $docker_exec "${array[0]}" "${array[1]/#/s3://}" "${array[2]/#/s3://}"
    elif [[ "${array[0]}" =~ get ]]; then
      $docker_exec "${array[0]}" "${array[1]/#/s3://}" "${array[2]}"
    elif [[ "${array[0]}" =~ put|sync ]]; then
      local input_file="${array[1]}"
      if [ ! -e "$input_file" ]; then
          echo "$input_file doesn't exist !"
          return
      fi
      if [ "$(dirname $input_file)" != "$WORKING_DIR" ]; then
          echo "$input_file should be in $WORKING_DIR directory !"
          return
      fi
      $docker_exec "${array[0]}" "${array[1]}" "${array[2]/#/s3://}"
    else
      $docker_exec "${array[@]}"
    fi
  else
    echo "$PROGRAM is not running so S3 calls are not avaiable."
    echo "Start it with: ./$PROGRAM start [working dir]"
  fi
}

function show_rgw_logs {
  if docker ps | grep -sq ceph-nano; then
    log_file=$(docker exec ceph-nano ls /var/log/ceph/ | grep client.rgw)
    docker exec ceph-nano cat /var/log/ceph/"$log_file"
  else
    echo "No logs to show, $PROGRAM is not running."
    echo "Start it with: ./$PROGRAM start [working dir]"
  fi
}

function restart_ceph_nano {
  if docker ps | grep -sq ceph-nano; then
    echo "Restarting $PROGRAM..."
    stop_ceph_nano
    start_ceph_nano
  else
    echo "$PROGRAM is not running, start it with:"
    echo "./$PROGRAM start [working dir]"
  fi
}

function too_many_options {
  if [[ -n "$2" ]]; then
    echo "The '$1' option works as a single parameter to $PROGRAM."
    echo "There is no need for an additionnal option to $1."
    echo "Run: './$PROGRAM help' to see how to use $PROGRAM"
    exit 1
  fi
}

########
# MAIN #
########
test_args  "$@"
docker_exist

case "$1" in
  start)
    create_ceph_nano_volumes
    start_ceph_nano "$2"
    echo_info
    ;;
  status)
    too_many_options "$@"
    echo_info
    ;;
  stop)
    too_many_options "$@"
    stop_ceph_nano
    ;;
  restart)
    too_many_options "$@"
    restart_ceph_nano
    ;;
  purge)
    too_many_options "$@"
    purge_ceph_nano
    echo "$PROGRAM purged."
    ;;
  mb|rb|ls|la|put|get|del|info|du|cp|mv|sync)
    s3cmd_wrap "$@"
    ;;
  logs)
    too_many_options "$@"
    show_rgw_logs
    ;;
  help|*)
    show_usage
    ;;
esac
